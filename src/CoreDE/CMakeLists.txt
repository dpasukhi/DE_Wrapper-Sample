get_filename_component(ProjectId ${CMAKE_CURRENT_SOURCE_DIR} NAME)
string(REPLACE " " "_" ProjectId ${ProjectId})
project(${ProjectId})

file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/FILES" SOURCE REGEX ".*\\.cxx")
file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/FILES" HEADER REGEX ".*\\.hxx")
file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/FILES" P_HEADER REGEX ".*\\.pxx")

add_library(${ProjectId} SHARED)

cmake_policy(SET CMP0076 NEW)
target_sources(${ProjectId} PRIVATE ${SOURCE} PUBLIC ${HEADER} PRIVATE ${P_HEADER})

set_target_properties(${ProjectId} PROPERTIES LINKER_LANGUAGE CXX)

file(STRINGS "${CMAKE_CURRENT_SOURCE_DIR}/EXTERNLIB" EXTERNLIB)
list(REMOVE_DUPLICATES EXTERNLIB)

foreach (USED_LIB ${EXTERNLIB})
  list(FIND OpenCASCADE_LIBRARIES ${USED_LIB} IS_OPENCASCADE_TOOLKIT)
  if (NOT ${IS_OPENCASCADE_TOOLKIT} EQUAL -1)
    if (WIN32)
      set (USED_LIB_DEBUG ${OpenCASCADE_LIBRARY_DIR}d/${USED_LIB}.lib)
      set (USED_LIB_RELEASE ${OpenCASCADE_LIBRARY_DIR}/${USED_LIB}.lib)
      set (USED_LIB_RELWITHDEBINFO ${OpenCASCADE_LIBRARY_DIR}i/${USED_LIB}.lib)
    elseif(APPLE)
      set (USED_LIB_DEBUG ${OpenCASCADE_LIBRARY_DIR}/lib${USED_LIB}.dylib)
      set (USED_LIB_RELEASE ${OpenCASCADE_LIBRARY_DIR}/lib${USED_LIB}.dylib)
      set (USED_LIB_RELWITHDEBINFO ${OpenCASCADE_LIBRARY_DIR}/lib${USED_LIB}.dylib)
    else()
      set (USED_LIB_DEBUG ${OpenCASCADE_LIBRARY_DIR}/lib${USED_LIB}.so)
      set (USED_LIB_RELEASE ${OpenCASCADE_LIBRARY_DIR}/lib${USED_LIB}.so)
      set (USED_LIB_RELWITHDEBINFO ${OpenCASCADE_LIBRARY_DIR}/lib${USED_LIB}.so)
    endif()
    set (USED_LIB_CONF)
    if (EXISTS ${USED_LIB_DEBUG})
      set (USED_LIB_CONF "$<$<CONFIG:DEBUG>:${USED_LIB_DEBUG}>;${USED_LIB_CONF}")
    endif()
    if (EXISTS ${USED_LIB_RELEASE})
      set (USED_LIB_CONF "$<$<CONFIG:RELEASE>:${USED_LIB_RELEASE}>;${USED_LIB_CONF}")
    endif()
    if (EXISTS ${USED_LIB_RELWITHDEBINFO})
      set (USED_LIB_CONF "$<$<CONFIG:RELWITHDEBINFO>:${USED_LIB_RELWITHDEBINFO}>;${USED_LIB_CONF}")
    endif()
    if (DEFINED USED_LIB_CONF)
      set_property (TARGET ${ProjectId} APPEND PROPERTY LINK_LIBRARIES "${USED_LIB_CONF}")
    endif()
  endif()
endforeach()

foreach (USED_LIB ${EXTERNLIB})
  list(FIND OpenCASCADE_LIBRARIES ${USED_LIB} IS_OPENCASCADE_TOOLKIT)
  if (NOT ${IS_OPENCASCADE_TOOLKIT} EQUAL -1)
    if (WIN32)
      set (USED_LIB_DEBUG ${OpenCASCADE_BINARY_DIR}d/${USED_LIB}.dll)
      set (USED_LIB_RELEASE ${OpenCASCADE_BINARY_DIR}/${USED_LIB}.dll)
      set (USED_LIB_RELWITHDEBINFO ${OpenCASCADE_BINARY_DIR}i/${USED_LIB}.dll)
    elseif(APPLE)
      set (USED_LIB_DEBUG ${OpenCASCADE_BINARY_DIR}/lib${USED_LIB}.dylib)
      set (USED_LIB_RELEASE ${OpenCASCADE_BINARY_DIR}/lib${USED_LIB}.dylib)
      set (USED_LIB_RELWITHDEBINFO ${OpenCASCADE_BINARY_DIR}/lib${USED_LIB}.dylib)
    else()
      set (USED_LIB_DEBUG ${OpenCASCADE_BINARY_DIR}/lib${USED_LIB}.so)
      set (USED_LIB_RELEASE ${OpenCASCADE_BINARY_DIR}/lib${USED_LIB}.so)
      set (USED_LIB_RELWITHDEBINFO ${OpenCASCADE_BINARY_DIR}/lib${USED_LIB}.so)
    endif()
    if (EXISTS ${USED_LIB_DEBUG})
      install (FILES ${USED_LIB_DEBUG} CONFIGURATIONS Debug DESTINATION "bind")
    endif()
    if (EXISTS ${USED_LIB_RELEASE})
      install (FILES ${USED_LIB_RELEASE} CONFIGURATIONS Release DESTINATION "bin")
    endif()
    if (EXISTS ${USED_LIB_RELWITHDEBINFO})
      install (FILES ${USED_LIB_RELWITHDEBINFO} CONFIGURATIONS RelWithDebInfo DESTINATION "bini")
      install (FILES ${USED_LIB_RELWITHDEBINFO} CONFIGURATIONS MinSizeRel DESTINATION "bins")
    endif()
  endif()
endforeach()

target_link_libraries (${ProjectId} ${EXTERNLIB})

install(TARGETS ${ProjectId} CONFIGURATIONS Debug DESTINATION "bind")
install(TARGETS ${ProjectId} CONFIGURATIONS Release DESTINATION "bin")
install(TARGETS ${ProjectId} CONFIGURATIONS RelWithDebInfo DESTINATION "bini")
install(TARGETS ${ProjectId} CONFIGURATIONS MinSizeRel DESTINATION "bins")
